
import { Account, AccountOptions } from "@eversdk/appkit";
import { AbiContract } from "@eversdk/core";
import { deployHelper, runHelper, runLocalHelper, Transaction, ContractPackageEx } from "../helpers";

export class SuperRootAccount extends Account {
    static package: ContractPackageEx = {
        abi: {"ABI version":2,"version":"2.2.0","header":["pubkey","time","expire"],"functions":[{"name":"onDeploy","inputs":[{"name":"global_config_code","type":"cell"},{"name":"flex_client_stub","type":"cell"},{"name":"prev_super_root","type":"optional(address)"}],"outputs":[],"id":"0xa"},{"name":"update","inputs":[{"name":"cfg_deploy_evers","type":"uint128"},{"name":"cfg_keep_evers","type":"uint128"},{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"version","type":"tuple"},{"name":"wrappers_cfg","type":"address"},{"name":"flex","type":"address"},{"name":"user_cfg","type":"address"},{"name":"description","type":"string"}],"outputs":[],"id":"0xb"},{"name":"updateConfirmed","inputs":[{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"version","type":"tuple"}],"outputs":[],"id":"0xc"},{"name":"release","inputs":[],"outputs":[],"id":"0xd"},{"name":"proxy","inputs":[{"name":"msg","type":"cell"}],"outputs":[],"id":"0xe"},{"name":"deployWrappersConfig","inputs":[{"name":"_answer_id","type":"uint32"},{"name":"deploy_evers","type":"uint128"},{"name":"wrappers_cfg_keep_evers","type":"uint128"},{"name":"token_version","type":"uint32"},{"name":"wrappers_cfg_code","type":"cell"},{"name":"wic_code","type":"cell"}],"outputs":[{"name":"value0","type":"address"}],"id":"0xf"},{"name":"deployFlex","inputs":[{"name":"_answer_id","type":"uint32"},{"name":"deploy_evers","type":"uint128"},{"name":"keep_evers","type":"uint128"},{"components":[{"name":"deploy","type":"uint128"},{"name":"setnext","type":"uint128"},{"name":"pair_keep","type":"uint128"}],"name":"evers","type":"tuple"},{"name":"old_flex","type":"optional(address)"},{"name":"exchange_version","type":"uint32"},{"name":"flex_code","type":"cell"},{"name":"xchg_pair_code","type":"cell"},{"name":"xchg_price_code","type":"cell"},{"components":[{"name":"transfer_tip3","type":"uint128"},{"name":"return_ownership","type":"uint128"},{"name":"order_answer","type":"uint128"},{"name":"process_queue","type":"uint128"},{"name":"send_notify","type":"uint128"},{"name":"dest_wallet_keep_evers","type":"uint128"}],"name":"ev_cfg","type":"tuple"},{"name":"deals_limit","type":"uint8"}],"outputs":[{"name":"value0","type":"address"}],"id":"0x10"},{"name":"deployUserDataConfig","inputs":[{"name":"_answer_id","type":"uint32"},{"name":"deploy_evers","type":"uint128"},{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"triplet","type":"tuple"},{"components":[{"name":"flex","type":"address"},{"name":"unsalted_price_code_hash","type":"uint256"}],"name":"binding","type":"tuple"},{"name":"user_data_cfg_code","type":"cell"},{"name":"flex_client_code","type":"cell"},{"name":"auth_index_code","type":"cell"},{"name":"user_id_index_code","type":"cell"}],"outputs":[{"name":"value0","type":"address"}],"id":"0x11"},{"name":"cloneWrappersConfig","inputs":[{"name":"_answer_id","type":"uint32"},{"name":"wrappers_cfg","type":"address"},{"name":"wrapper_cfg_keep_evers","type":"uint128"},{"name":"clone_deploy_evers","type":"uint128"},{"components":[{"name":"deploy","type":"uint128"},{"name":"setnext","type":"uint128"},{"name":"wic_keep","type":"uint128"}],"name":"wic_evers","type":"tuple"},{"name":"new_token_version","type":"uint32"},{"name":"wrapper_deployers","type":"address[]"}],"outputs":[],"id":"0x12"},{"name":"transfer","inputs":[{"name":"to","type":"address"},{"name":"evers","type":"uint128"}],"outputs":[],"id":"0x13"},{"name":"transferReserveTokens","inputs":[{"name":"wrapper","type":"address"},{"name":"tokens","type":"uint128"},{"name":"to","type":"address"},{"name":"evers","type":"uint128"}],"outputs":[],"id":"0x14"},{"name":"setFlags","inputs":[{"name":"stop_trade","type":"optional(bool)"},{"name":"abandon_ship","type":"optional(bool)"},{"name":"update_started","type":"optional(bool)"}],"outputs":[],"id":"0x15"},{"name":"setOwner","inputs":[{"name":"owner","type":"address"}],"outputs":[],"id":"0x16"},{"name":"setUpdateTeam","inputs":[{"name":"team","type":"optional(address)"}],"outputs":[],"id":"0x17"},{"name":"setNextSuperRoot","inputs":[{"name":"next_super_root","type":"address"}],"outputs":[],"id":"0x18"},{"name":"getDetails","inputs":[],"outputs":[{"name":"pubkey","type":"uint256"},{"name":"stop_trade_","type":"bool"},{"name":"abandon_ship_","type":"bool"},{"name":"update_started_","type":"bool"},{"name":"owner","type":"address"},{"name":"update_team","type":"optional(address)"},{"name":"global_config_code","type":"cell"},{"name":"global_config_hash","type":"uint256"},{"name":"workchain_id","type":"int8"},{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"version","type":"optional(tuple)"},{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"beta_version","type":"optional(tuple)"},{"name":"deploying_cfg","type":"optional(address)"},{"name":"cur_cfg","type":"optional(address)"},{"name":"beta_cfg","type":"optional(address)"},{"name":"prev_super_root","type":"optional(address)"},{"name":"next_super_root","type":"optional(address)"},{"name":"revision","type":"uint32"}],"id":"0x19"},{"name":"getGlobalConfig","inputs":[{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"version","type":"tuple"}],"outputs":[{"name":"value0","type":"address"}],"id":"0x1a"},{"name":"getCurrentGlobalConfig","inputs":[],"outputs":[{"name":"value0","type":"address"}],"id":"0x1b"}],"fields":[{"name":"__uninitialized","type":"bool"},{"name":"pubkey_","type":"uint256"},{"name":"stop_trade_","type":"bool"},{"name":"abandon_ship_","type":"bool"},{"name":"update_started_","type":"bool"},{"name":"owner_","type":"address"},{"name":"update_team_","type":"optional(address)"},{"name":"global_config_code_","type":"optional(cell)"},{"name":"flex_client_stub_","type":"optional(cell)"},{"name":"workchain_id_","type":"int8"},{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"version_","type":"optional(tuple)"},{"components":[{"name":"wallet","type":"uint32"},{"name":"exchange","type":"uint32"},{"name":"user","type":"uint32"}],"name":"beta_version_","type":"optional(tuple)"},{"name":"deploying_cfg_","type":"optional(address)"},{"name":"prev_super_root_","type":"optional(address)"},{"name":"next_super_root_","type":"optional(address)"},{"name":"revision_","type":"uint32"}],"events":[]} as unknown as AbiContract,
        tvc: "",
        code: "",
        codeHash: "bd285960991586a99a7b14fbe04cebad0e32e66779cf05b217c1bb95266685c7",
    };
    
    constructor(options: AccountOptions) {
        super(SuperRootAccount.package, options);
    }
    async deployContract(): Promise<{
        transaction: Transaction,
    }> {
        return await deployHelper(this, "", {});
    }

    async runOnDeploy(input: {
        global_config_code: string// cell,
        flex_client_stub: string// cell,
        prev_super_root?: string// optional(address),
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "onDeploy", input);
    }

    async runLocalOnDeploy(input: {
        global_config_code: string// cell,
        flex_client_stub: string// cell,
        prev_super_root?: string// optional(address),
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "onDeploy", input);
    }

    async runUpdate(input: {
        cfg_deploy_evers: string | number | bigint// uint128,
        cfg_keep_evers: string | number | bigint// uint128,
        version: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
        wrappers_cfg: string// address,
        flex: string// address,
        user_cfg: string// address,
        description: string// string,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "update", input);
    }

    async runLocalUpdate(input: {
        cfg_deploy_evers: string | number | bigint// uint128,
        cfg_keep_evers: string | number | bigint// uint128,
        version: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
        wrappers_cfg: string// address,
        flex: string// address,
        user_cfg: string// address,
        description: string// string,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "update", input);
    }

    async runUpdateConfirmed(input: {
        version: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "updateConfirmed", input);
    }

    async runLocalUpdateConfirmed(input: {
        version: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "updateConfirmed", input);
    }

    async runRelease(): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "release", {});
    }

    async runLocalRelease(): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "release", {});
    }

    async runProxy(input: {
        msg: string// cell,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "proxy", input);
    }

    async runLocalProxy(input: {
        msg: string// cell,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "proxy", input);
    }

    async runDeployWrappersConfig(input: {
        _answer_id: number// uint32,
        deploy_evers: string | number | bigint// uint128,
        wrappers_cfg_keep_evers: string | number | bigint// uint128,
        token_version: number// uint32,
        wrappers_cfg_code: string// cell,
        wic_code: string// cell,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runHelper(this, "deployWrappersConfig", input);
    }

    async runLocalDeployWrappersConfig(input: {
        _answer_id: number// uint32,
        deploy_evers: string | number | bigint// uint128,
        wrappers_cfg_keep_evers: string | number | bigint// uint128,
        token_version: number// uint32,
        wrappers_cfg_code: string// cell,
        wic_code: string// cell,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runLocalHelper(this, "deployWrappersConfig", input);
    }

    async runDeployFlex(input: {
        _answer_id: number// uint32,
        deploy_evers: string | number | bigint// uint128,
        keep_evers: string | number | bigint// uint128,
        evers: {
            deploy: string | number | bigint// uint128
            setnext: string | number | bigint// uint128
            pair_keep: string | number | bigint// uint128
        }// tuple,
        old_flex?: string// optional(address),
        exchange_version: number// uint32,
        flex_code: string// cell,
        xchg_pair_code: string// cell,
        xchg_price_code: string// cell,
        ev_cfg: {
            transfer_tip3: string | number | bigint// uint128
            return_ownership: string | number | bigint// uint128
            order_answer: string | number | bigint// uint128
            process_queue: string | number | bigint// uint128
            send_notify: string | number | bigint// uint128
            dest_wallet_keep_evers: string | number | bigint// uint128
        }// tuple,
        deals_limit: number// uint8,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runHelper(this, "deployFlex", input);
    }

    async runLocalDeployFlex(input: {
        _answer_id: number// uint32,
        deploy_evers: string | number | bigint// uint128,
        keep_evers: string | number | bigint// uint128,
        evers: {
            deploy: string | number | bigint// uint128
            setnext: string | number | bigint// uint128
            pair_keep: string | number | bigint// uint128
        }// tuple,
        old_flex?: string// optional(address),
        exchange_version: number// uint32,
        flex_code: string// cell,
        xchg_pair_code: string// cell,
        xchg_price_code: string// cell,
        ev_cfg: {
            transfer_tip3: string | number | bigint// uint128
            return_ownership: string | number | bigint// uint128
            order_answer: string | number | bigint// uint128
            process_queue: string | number | bigint// uint128
            send_notify: string | number | bigint// uint128
            dest_wallet_keep_evers: string | number | bigint// uint128
        }// tuple,
        deals_limit: number// uint8,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runLocalHelper(this, "deployFlex", input);
    }

    async runDeployUserDataConfig(input: {
        _answer_id: number// uint32,
        deploy_evers: string | number | bigint// uint128,
        triplet: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
        binding: {
            flex: string// address
            unsalted_price_code_hash: string | number | bigint// uint256
        }// tuple,
        user_data_cfg_code: string// cell,
        flex_client_code: string// cell,
        auth_index_code: string// cell,
        user_id_index_code: string// cell,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runHelper(this, "deployUserDataConfig", input);
    }

    async runLocalDeployUserDataConfig(input: {
        _answer_id: number// uint32,
        deploy_evers: string | number | bigint// uint128,
        triplet: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
        binding: {
            flex: string// address
            unsalted_price_code_hash: string | number | bigint// uint256
        }// tuple,
        user_data_cfg_code: string// cell,
        flex_client_code: string// cell,
        auth_index_code: string// cell,
        user_id_index_code: string// cell,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runLocalHelper(this, "deployUserDataConfig", input);
    }

    async runCloneWrappersConfig(input: {
        _answer_id: number// uint32,
        wrappers_cfg: string// address,
        wrapper_cfg_keep_evers: string | number | bigint// uint128,
        clone_deploy_evers: string | number | bigint// uint128,
        wic_evers: {
            deploy: string | number | bigint// uint128
            setnext: string | number | bigint// uint128
            wic_keep: string | number | bigint// uint128
        }// tuple,
        new_token_version: number// uint32,
        wrapper_deployers: string// address[],
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "cloneWrappersConfig", input);
    }

    async runLocalCloneWrappersConfig(input: {
        _answer_id: number// uint32,
        wrappers_cfg: string// address,
        wrapper_cfg_keep_evers: string | number | bigint// uint128,
        clone_deploy_evers: string | number | bigint// uint128,
        wic_evers: {
            deploy: string | number | bigint// uint128
            setnext: string | number | bigint// uint128
            wic_keep: string | number | bigint// uint128
        }// tuple,
        new_token_version: number// uint32,
        wrapper_deployers: string// address[],
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "cloneWrappersConfig", input);
    }

    async runTransfer(input: {
        to: string// address,
        evers: string | number | bigint// uint128,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "transfer", input);
    }

    async runLocalTransfer(input: {
        to: string// address,
        evers: string | number | bigint// uint128,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "transfer", input);
    }

    async runTransferReserveTokens(input: {
        wrapper: string// address,
        tokens: string | number | bigint// uint128,
        to: string// address,
        evers: string | number | bigint// uint128,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "transferReserveTokens", input);
    }

    async runLocalTransferReserveTokens(input: {
        wrapper: string// address,
        tokens: string | number | bigint// uint128,
        to: string// address,
        evers: string | number | bigint// uint128,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "transferReserveTokens", input);
    }

    async runSetFlags(input: {
        stop_trade?: boolean// optional(bool),
        abandon_ship?: boolean// optional(bool),
        update_started?: boolean// optional(bool),
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "setFlags", input);
    }

    async runLocalSetFlags(input: {
        stop_trade?: boolean// optional(bool),
        abandon_ship?: boolean// optional(bool),
        update_started?: boolean// optional(bool),
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "setFlags", input);
    }

    async runSetOwner(input: {
        owner: string// address,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "setOwner", input);
    }

    async runLocalSetOwner(input: {
        owner: string// address,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "setOwner", input);
    }

    async runSetUpdateTeam(input: {
        team?: string// optional(address),
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "setUpdateTeam", input);
    }

    async runLocalSetUpdateTeam(input: {
        team?: string// optional(address),
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "setUpdateTeam", input);
    }

    async runSetNextSuperRoot(input: {
        next_super_root: string// address,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runHelper(this, "setNextSuperRoot", input);
    }

    async runLocalSetNextSuperRoot(input: {
        next_super_root: string// address,
    }): Promise<{
        transaction: Transaction,
    }> {
        return await runLocalHelper(this, "setNextSuperRoot", input);
    }

    async runGetDetails(): Promise<{
        transaction: Transaction,
        output: {
            pubkey: string// uint256,
            stop_trade_: boolean// bool,
            abandon_ship_: boolean// bool,
            update_started_: boolean// bool,
            owner: string// address,
            update_team?: string// optional(address),
            global_config_code: string// cell,
            global_config_hash: string// uint256,
            workchain_id: number// int8,
            version?: {
                wallet: number// uint32
                exchange: number// uint32
                user: number// uint32
            }// optional(tuple),
            beta_version?: {
                wallet: number// uint32
                exchange: number// uint32
                user: number// uint32
            }// optional(tuple),
            deploying_cfg?: string// optional(address),
            cur_cfg?: string// optional(address),
            beta_cfg?: string// optional(address),
            prev_super_root?: string// optional(address),
            next_super_root?: string// optional(address),
            revision: number// uint32,
        }
    }> {
        return await runHelper(this, "getDetails", {});
    }

    async runLocalGetDetails(): Promise<{
        transaction: Transaction,
        output: {
            pubkey: string// uint256,
            stop_trade_: boolean// bool,
            abandon_ship_: boolean// bool,
            update_started_: boolean// bool,
            owner: string// address,
            update_team?: string// optional(address),
            global_config_code: string// cell,
            global_config_hash: string// uint256,
            workchain_id: number// int8,
            version?: {
                wallet: number// uint32
                exchange: number// uint32
                user: number// uint32
            }// optional(tuple),
            beta_version?: {
                wallet: number// uint32
                exchange: number// uint32
                user: number// uint32
            }// optional(tuple),
            deploying_cfg?: string// optional(address),
            cur_cfg?: string// optional(address),
            beta_cfg?: string// optional(address),
            prev_super_root?: string// optional(address),
            next_super_root?: string// optional(address),
            revision: number// uint32,
        }
    }> {
        return await runLocalHelper(this, "getDetails", {});
    }

    async runGetGlobalConfig(input: {
        version: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runHelper(this, "getGlobalConfig", input);
    }

    async runLocalGetGlobalConfig(input: {
        version: {
            wallet: number// uint32
            exchange: number// uint32
            user: number// uint32
        }// tuple,
    }): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runLocalHelper(this, "getGlobalConfig", input);
    }

    async runGetCurrentGlobalConfig(): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runHelper(this, "getCurrentGlobalConfig", {});
    }

    async runLocalGetCurrentGlobalConfig(): Promise<{
        transaction: Transaction,
        output: {
            value0: string// address,
        }
    }> {
        return await runLocalHelper(this, "getCurrentGlobalConfig", {});
    }

}

